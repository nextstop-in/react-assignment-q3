{"version":3,"sources":["component/Homepage.js","component/SignIn.js","component/ShopPage.js","component/Displaydata.js","component/UserData.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","onClick","history","push","SignIn","ShopPage","Displaydata","title","className","initialState","loading","error","post","reducer","state","action","type","payload","UserData","useReducer","dispatch","useEffect","axios","get","then","response","data","catch","map","key","id","App","exact","path","component","Homepage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gQAaeA,EAXA,SAACC,GACZ,OACI,6BACF,oEACA,4BAAQC,QAAS,kBAAID,EAAME,QAAQC,KAAK,WAAxC,cACA,4BAAQF,QAAS,kBAAID,EAAME,QAAQC,KAAK,aAAxC,iBACA,4BAAQF,QAAS,kBAAID,EAAME,QAAQC,KAAK,OAAxC,oBCKSC,EAXF,SAACJ,GACV,OACI,6BACF,6DACA,4BAAQC,QAAS,kBAAID,EAAME,QAAQC,KAAK,WAAxC,cACA,4BAAQF,QAAS,kBAAID,EAAME,QAAQC,KAAK,WAAxC,cACA,4BAAQF,QAAS,kBAAID,EAAME,QAAQC,KAAK,OAAxC,oBCMSE,EAXA,SAACL,GACZ,OACI,6BACF,2EACA,4BAAQC,QAAS,kBAAID,EAAME,QAAQC,KAAK,WAAxC,cACA,4BAAQF,QAAS,kBAAID,EAAME,QAAQC,KAAK,aAAxC,iBACA,4BAAQF,QAAS,kBAAID,EAAME,QAAQC,KAAK,OAAxC,oB,gCCCSG,G,MARK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,OACE,yBAAKC,UAAU,eACb,2BAAID,MCCJE,EAAe,CACnBC,SAAS,EACTC,MAAO,GACPC,KAAM,IAKFC,EAAU,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAAK,gBACH,OAAO,2BACFF,GADL,IAEEJ,SAAS,EACTE,KAAMG,EAAOE,QACbN,MAAO,KAEX,IAAK,cACH,OAAO,2BACFG,GADL,IAEEJ,SAAS,EACTE,KAAM,GACND,MAAO,0BAEX,QACE,OAAOG,IAwCEI,MApCf,SAAkBlB,GAAQ,IAAD,EACGmB,qBAAWN,EAASJ,GADvB,mBAChBK,EADgB,KACTM,EADS,KAcvB,OAXAC,qBAAU,WACRC,IACGC,IAAI,8CACJC,MAAK,SAACC,GACLL,EAAS,CAAEJ,KAAM,gBAAiBC,QAASQ,EAASC,UAErDC,OAAM,SAAChB,GACNS,EAAS,CAAEJ,KAAM,qBAEpB,IAGD,6BACE,4BAAQf,QAAS,kBAAMD,EAAME,QAAQC,KAAK,WAA1C,cACA,4BAAQF,QAAS,kBAAMD,EAAME,QAAQC,KAAK,aAA1C,iBAGA,4BAAQF,QAAS,kBAAMD,EAAME,QAAQC,KAAK,WAA1C,kBAGA,sGAGCW,EAAMJ,QACH,UACAI,EAAMF,KAAKgB,KAAI,SAAChB,GACd,OAAO,kBAAC,EAAD,CAAaiB,IAAKjB,EAAKkB,GAAIvB,MAAOK,EAAKL,WAEnDO,EAAMH,MAAQG,EAAMH,MAAQ,OC9CpBoB,MAbf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,QAAQC,UAAWC,IACrC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,QAAQC,UAAW7B,IACrC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,UAAUC,UAAW9B,OCF3BgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SD4H1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAhB,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.d86da740.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HomePage=(props)=>{\r\n    return(\r\n        <div>\r\n      <h1>  Here you can filter your category </h1>\r\n      <button onClick={()=>props.history.push('/shop')}>Go to shop</button>\r\n      <button onClick={()=>props.history.push('/signin')}>Go to setting</button>\r\n      <button onClick={()=>props.history.push('/')}>Go to mainpage</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nconst SignIn=(props)=>{\r\n    return(\r\n        <div>\r\n      <h1>  Please sign in to continue </h1>\r\n      <button onClick={()=>props.history.push('/home')}>Go to home</button>\r\n      <button onClick={()=>props.history.push('/shop')}>Go to shop</button>\r\n      <button onClick={()=>props.history.push('/')}>Go to mainpage</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\n\r\n\r\nconst ShopPage=(props)=>{\r\n    return(\r\n        <div>\r\n      <h1>  Here you can buy any movie of your coice </h1>\r\n      <button onClick={()=>props.history.push('/home')}>Go to home</button>\r\n      <button onClick={()=>props.history.push('/signin')}>Go to setting</button>\r\n      <button onClick={()=>props.history.push('/')}>Go to mainpage</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShopPage;","import React from \"react\";\r\nimport \"./displaydata.styles.css\";\r\nconst Displaydata = ({ title }) => {\r\n  return (\r\n    <div className=\"displaydata\">\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Displaydata;\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./displaydata.styles.css\";\r\nimport Displaydata from \"./Displaydata\";\r\n\r\n//Declaring initial state\r\nconst initialState = {\r\n  loading: true,\r\n  error: \"\",\r\n  post: {},\r\n};\r\n\r\n//Creating our reducer which takes state and action as arguments\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        post: action.payload,\r\n        error: \"\",\r\n      };\r\n    case \"FETCH_ERROR\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        post: {},\r\n        error: \"Something Went Wrong!\",\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nfunction UserData(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((response) => {\r\n        dispatch({ type: \"FETCH_SUCCESS\", payload: response.data });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({ type: \"FETCH_ERROR\" });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => props.history.push(\"/shop\")}>Go to shop</button>\r\n      <button onClick={() => props.history.push(\"/signin\")}>\r\n        Go to setting\r\n      </button>\r\n      <button onClick={() => props.history.push(\"/home\")}>\r\n        Go to homepage\r\n      </button>\r\n      <h2>\r\n        User Posts from an API( \"https://jsonplaceholder.typicode.com/posts\" )\r\n      </h2>\r\n      {state.loading\r\n        ? \"loading\"\r\n        : state.post.map((post) => {\r\n            return <Displaydata key={post.id} title={post.title} />;\r\n          })}\r\n      {state.error ? state.error : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserData;\r\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Homepage from \"./component/Homepage\";\nimport SignIn from \"./component/SignIn\";\nimport ShopPage from \"./component/ShopPage\";\nimport UserData from \"./component/UserData\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={UserData} />\n        <Route exact path=\"/home\" component={Homepage} />\n        <Route exact path=\"/shop\" component={ShopPage} />\n        <Route exact path=\"/signin\" component={SignIn} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}